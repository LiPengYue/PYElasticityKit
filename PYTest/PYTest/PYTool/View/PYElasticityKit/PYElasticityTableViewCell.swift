//
//  KROverdueDecorateTBVCell.swift
//  koalareading
//
//  Created by ÊùéÈπèË∑É on 2017/11/9.
//  Copyright ¬© 2017Âπ¥ koalareading. All rights reserved.
//
//MARK: - ------------------- ~ read me ~ -----------------------
/* ‰ΩøÁî®Ôºö
 1. ÁªßÊâøËá™PYElasticityTableViewCellÔºåÁÑ∂ÂêéËá™ÂÆö‰πâ‰∏Ä‰∏™‰º†ËæìÊï∞ÊçÆÁöÑmodelÊé•Âè£Ôºå
 2. ÁÑ∂ÂêéÂú®modelÁöÑdidSetÊñπÊ≥ïÈáåÈù¢Ôºå‰Ω†Ë¶ÅË∞ÉÁî®*setCollectionViewData*Ëøô‰∏™ÊñπÊ≥ïÔºåÁªôcollectionView‰º†ÈÄíÊï∞ÊçÆÔºå
 3. Â¶ÇÊûú‰∏çÊÉ≥ÁÇπÂáªcollectionView‰∏ãÈù¢ÁöÑÊåâÈíÆÂêéËá™Âä®ËÆ©‰Ω†ÁöÑtableviewÂà∑Êñ∞ÔºåÈÇ£‰πàÂèØ‰ª•ËÆæÁΩÆÂ±ûÊÄßisAutoReloadData‰∏∫FalseÔºå‰ΩÜÊòØ‰Ω†ÂøÖÈ°ªË¶ÅÂú®tableVIewÁöÑÊï∞ÊçÆÊ∫ê‰∏≠ÔºåÁõëÂê¨Âà∞ÁÇπÂáª‰∫ã‰ª∂ÔºåÂπ∂ÊâãÂä®Âà∑Êñ∞ÔºåÁõ¥Êé•Â§çÂà∂Á≤òË¥¥‰∏ãÈù¢‰ª£Á†ÅÂà∞Êï∞ÊçÆÊ∫ê‰∏≠ÔºåÊ≥®ÊÑèmessageÔºåÊòØcollectionViewÂΩìÂâçÁöÑÊï∞ÊçÆÊ∫êÊï∞ÁªÑ„ÄÇ
 ¬∑¬∑¬∑¬∑‰ª£Á†ÅÔºö
 self?.eceivedSignalFunc(eventCallBack: { [weak self](signalKey, message) -> (Any)? in
 if signalKey == PYElasticityTableViewCell_ClickMoreButton {
 /// ‰Ω†Ë¶ÅÁöÑÁÇπÂáª‰∫ã‰ª∂Âú®ËøôÈáåÊãøÂà∞
 self?.reloadData()
 }
 return nil
 })
 ¬∑¬∑¬∑¬∑
 */

import UIKit
public let PYElasticityTableViewCell_ClickMoreButton = "PYElasticityTableViewCell_ClickMoreButton"
///self‰∏≠ÁöÑcollectionViewÔºå‰∏éselfËÉåÊôØËâ≤Áõ∏Âêå
class PYElasticityTableViewCell: UITableViewCell {
    //MARK: - ÈÖçÁΩÆÂ±ûÊÄß
    
    ///ÁÇπÂáªÂêéÂ±ïÂºÄÊåâÈíÆÂêéÔºåÁà∂Êéß‰ª∂ÊòØÂê¶Ëá™Âä®Âà∑Êñ∞Êï∞ÊçÆ(ÈªòËÆ§ÊòØtrueÔºåÂ¶ÇÊûúËÆæÁΩÆÊàêFalseÔºåËØ∑Âú®tableview‰∏≠ÁöÑÊï∞ÊçÆÊ∫ê‰∏≠Áî®receivedSignalFuncÂáΩÊï∞ÁõëÂê¨ÁÇπÂáª‰∫ã‰ª∂ÔºåÁÑ∂ÂêéËá™Ë°åÂà∑Êñ∞,Ê≥®ÊÑèsignalKey‰∏∫PYElasticityTableViewCell_ClickMoreButton)
    var isAutoReloadData: Bool = true
    
    /// update topViewHÔºåÂ¶ÇÊûúÂú®ÂàõÂª∫selfÁöÑÊó∂ÂÄôÔºåÊ≤°ÊúâÁªôtopViewHÔºåÈÇ£‰πàËØ∑‰∏çË¶ÅÁî®Ëøô‰∏™Êù•Êõ¥ÊîπtopViewÁöÑÈ´òÂ∫¶
    var topViewH: CGFloat? {
        didSet {
            if let topViewH = topViewH {
                topView.snp.updateConstraints({ (make) in
                    make.height.equalTo(topViewH)
                })
            }
        }
    }
    /// upDate topViewHÔºå Â¶ÇÊûúÂú®ÂàõÂª∫selfÁöÑÊó∂ÂÄôÔºåÊ≤°ÊúâÁªôbottomViewHÔºåÈÇ£‰πàËØ∑‰∏çË¶ÅÁî®Ëøô‰∏™Êù•Êõ¥ÊîπbottomViewÁöÑÈ´òÂ∫¶
    var bottomViewH: CGFloat?  {
        didSet {
            bottomView.snp.updateConstraints({ (make) in
                make.height.equalTo(bottomViewH ?? 0)
            })
        }
    }
    
    ///backgroundView
    var py_backgroundView: UIView {get {return py_backgroundViewPrivate}}
    
    /// Âà∑Êñ∞BackGroundView ÁöÑmarginÂ§ßÂ∞è
    var backgroundViewBottomMargin: UIEdgeInsets = UIEdgeInsetsMake(0, 0, 0, 0) {
        didSet{
            py_backgroundView.snp.updateConstraints { (make) in
                make.left.equalTo(contentView).offset(backgroundViewBottomMargin.left)
                make.right.equalTo(contentView).offset(backgroundViewBottomMargin.right)
                make.bottom.equalTo(contentView).offset(backgroundViewBottomMargin.bottom)
                make.top.equalTo(contentView).offset(backgroundViewBottomMargin.top)
            }
        }
    }
    
    /// collectionViewÁöÑButton
    var collectionViewBottomButton: UIButton {
        get {
            return elasticityCollectionView.button
        }
    }
    
    ///ÂøÖÈ°ªËÆæÁΩÆËøô‰∏™ÂÄºÔºåÂú®‰Ω†ÁöÑtableviewÊï∞ÊçÆÊ∫ê‰∏≠
    var indexPath: IndexPath?
    
    ///collectionViewCell‰∏≠ÁÇπÂáª‰∫ã‰ª∂ÁöÑÊé•Êî∂
    func collectionViewCellEventCallBackFunc(cellEventCallBack: ((_ signal: String, _ message: Any)->())?) {
        self.cellEventCallBack = cellEventCallBack
    }
    
    ///ÁÇπÂáª‰∫ÜÂ∫ïÈÉ®ÁöÑÂ±ïÂºÄÊåâÈíÆ
    func clickBottomButtonFunc (_ clickBottomButtonCallBack: ((_ currentH: CGFloat,  _ cell: UITableViewCell)->(IndexPath)?)?) {
        self.clickBottomButtonCallBack = clickBottomButtonCallBack
    }
    
    
    /// ÈÖçÁΩÆcellÔºå‰ΩøÂæóÈáåÈù¢ÊúâÁÇπÂáªÊåâÈíÆÂèØ‰ª•‰º∏Áº©ÁöÑcollectionViewÔºå„Ääüå∂topView‰∏ébottomViewÈúÄË¶ÅÂõ∫ÂÆöÈ´òÂ∫¶Ôºå‰∏çËÉΩËá™ÈÄÇÂ∫îüå∂„Äã
    ///
    /// - Parameters:
    ///   - layout: collectionViewCell ÁöÑlayout
    ///   - cellClass: collectionViewCell ÁöÑclass
    ///   - maxShowItem: Êú™Â±ïÂºÄÁöÑÊó∂ÂÄôÊúÄÂ§öÂ±ïÁ§∫Â§öÂ∞ëÊù°
    ///   - maxRowItemNum: ÊØè‰∏ÄË°åÊúâÊúÄÂ§öÊúâÂ§öÂ∞ë
    ///   - isHiddenButton: ÊòØÂê¶ÈöêËóèÂ∫ïÈÉ®ÁöÑButtonÊåâÈíÆÔºåÈöêËóèÈÇ£Â∞±ÈªòËÆ§ÂÉèÊòØÊúÄÂ§öÊï∞ÊçÆ
    ///   - topView: topviewÔºåÂ¶ÇÊûúËÆæÁΩÆ‰∫ÜtopviewÔºåÈÇ£‰πàÊúÄÂ•ΩËÆæÁΩÆtopViewHÔºåÂ¶ÇÊûúÊ≤°ÊúâËÆæÁΩÆÔºåËØ∑Âú®topView‰∏≠Áî®Á∫¶ÊùüÊíëËµ∑topView
    ///   - bottomView: ÂêåtopView
    ///   - topViewH: topViewÁöÑÈ´òÂ∫¶: 1. Â¶ÇÊûúËÆæÁΩÆ‰∫ÜtopViewHÔºåÂèØ‰ª•ÈÄöËøá ÂØπself.topViewHËµãÂÄºÊù•Êõ¥ÊîπtopViewÁöÑÈ´òÂ∫¶ 2.Â¶ÇÊûúÈÄâÊã©Ê≤°ÊúâËµãÂÄºÔºåÈÇ£‰πàÂ∞±Ë¶ÅÂú®TopView‰∏≠ËÆæÁΩÆËá™ÈÄÇÂ∫îÁ∫¶Êùü Êù•ÊíëÂºÄ topView
    ///   - bottomViewH: ÂêåtopViewH
    func configurationCollectionViwFunc(layout: UICollectionViewFlowLayout,
                                        cellClass: AnyClass,maxShowItem: NSInteger,
                                        maxRowItemNum: NSInteger,
                                        isHiddenButton: Bool? = false,
                                        buttonInstert: UIEdgeInsets? = UIEdgeInsetsMake(0, 0, 0, 0),
                                        topView: PYElasticityTopView? = nil,
                                        bottomView: PYElasticityBottomView? = nil,
                                        topViewH: CGFloat? = 0,
                                        bottomViewH: CGFloat? = 0) {
        
        elasticityCollectionViewLayout = layout
        elasticityCollectionViewCellClass = cellClass
        elasticityCollectionView.maxShowItem = maxShowItem
        elasticityCollectionView.maxRowItemNum = maxRowItemNum
        elasticityCollectionView.isHiddenButton = isHiddenButton ?? false
        elasticityCollectionView.buttonInsets = buttonInstert ?? UIEdgeInsetsMake(0, 0, 0, 0)
        self.bottomView = bottomView ?? PYElasticityBottomView()
        self.topView = topView ?? PYElasticityTopView()
        isAddRestrainBotttomHeight = bottomViewH != nil
        isAddRestrainTopViewHeight = topViewH != nil
        
        registerEvent()
        /// Áî±‰∫éË¶ÅÂÖàÊúâÁ∫¶Êùü ÊâçËÉΩÂØπÂÖ∂ËøõË°åupdate ÊâÄ‰ª• Ë¶ÅÂú®topViewH ‰∏é bottomViewH ËµãÂÄº‰πãÈó¥ËøõË°åÁ∫¶Êùü
        setUPView()
        if let topViewH = topViewH {self.topViewH = topViewH}
        if let bottomViewH = bottomViewH {self.bottomViewH = bottomViewH}
        
    }
    
    //MARK: - ÁßÅÊúâÂ±ûÊÄß
    private var collectionViewModelArray: [Any] = []
    private lazy var elasticityCollectionView: PYElasticityCollectionView = {
        let elasticityCollectionView = PYElasticityCollectionView(frame: CGRect.zero, cellClass: self.elasticityCollectionViewCellClass, layout: self.elasticityCollectionViewLayout)
        return elasticityCollectionView
    }()
    
    private var topView: PYElasticityTopView = PYElasticityTopView()
    private var bottomView: PYElasticityBottomView = PYElasticityBottomView()
    private weak var superTableView: UITableView?
    
    private var elasticityCollectionViewLayout: UICollectionViewFlowLayout = UICollectionViewFlowLayout()
    private var elasticityCollectionViewCellClass: AnyClass = UICollectionViewCell.classForCoder()
    private var py_backgroundViewPrivate: UIView = UIView()
    
    private var isAddRestrainTopViewHeight: Bool = false
    private var isAddRestrainBotttomHeight: Bool = false
    
    ///MAKR: ÁÇπÂáª‰∫ã‰ª∂ÁöÑÊ≥®ÂÜå
    var clickBottomButtonCallBack: ((_ currentH: CGFloat,  _ cell: UITableViewCell)->(IndexPath)?)?
    ///collectionViewCell‰∏≠ÁÇπÂáª‰∫ã‰ª∂ÁöÑÊé•Êî∂
    private var cellEventCallBack: ((_ signal: String, _ message: Any)->())?
    
    
    //MARK: - ÂêëcollectionView Cell ‰º†ÈÄíÊï∞ÊçÆ ÁöÑÊñπÊ≥ï
    ///ÂêëcollectionView Cell ‰º†ÈÄíÊï∞ÊçÆ ÁöÑÊñπÊ≥ï
    func setCollectionViewData(data Data: [Any]) {
        elasticityCollectionView.isSelected = self.getIsSelected(index: indexPath)
        elasticityCollectionView.modelArray = Data
        let changeNameH =  elasticityCollectionView.currentViewH
        self.elasticityCollectionView.snp.updateConstraints { (make) in
            make.height.equalTo(changeNameH)
        }
    }
    
    
    //MARK: - setup View
    private func setUPView() {
        
        contentView.addSubview(py_backgroundView)
        py_backgroundView.addSubview(elasticityCollectionView)
        py_backgroundView.addSubview(topView)
        py_backgroundView.addSubview(bottomView)
        
        py_backgroundView.snp.makeConstraints { (make) in
            make.left.right.bottom.top.equalTo(contentView)
        }
        
        let elasticityCollectionViewH = elasticityCollectionView.currentViewH
        layoutTopView()
        elasticityCollectionView.snp.makeConstraints { (make) in
            make.left.equalTo(py_backgroundView).offset(kViewCurrentW_XP(W: 0))
            make.right.equalTo(py_backgroundView).offset(kViewCurrentW_XP(W: 0))
            make.top.equalTo(topView.snp.bottom)
            make.height.equalTo(elasticityCollectionViewH)
        }
        layoutBottomView()
    }
    
    /// topView Á∫¶Êùü
    private func layoutTopView() {
        /// ÈúÄË¶ÅÊ∑ªÂä† topView ÁöÑÈ´òÂ∫¶Á∫¶Êùü
        if isAddRestrainTopViewHeight {
            topView.snp.makeConstraints({ (make) in
                make.left.right.top.equalTo(py_backgroundView)
                make.height.equalTo(topViewH ?? 0)
            })
            return
        }
        topView.snp.makeConstraints({ (make) in
            make.left.right.top.equalTo(py_backgroundView)
            make.bottom.equalTo(elasticityCollectionView.snp.top)
        })
        
    }
    
    /// bottomView Á∫¶Êùü ËÆæÁΩÆ
    private func layoutBottomView() {
        if isAddRestrainBotttomHeight {
            bottomView.snp.makeConstraints({ (make) in
                make.left.right.bottom.equalTo(py_backgroundView)
                make.top.equalTo(elasticityCollectionView.snp.bottom)
                make.height.equalTo(bottomViewH ?? 0)
            })
            return
        }
        bottomView.snp.makeConstraints({ (make) in
            make.top.equalTo(elasticityCollectionView.snp.bottom)
            make.left.right.bottom.equalTo(py_backgroundView)
        })
        
    }
    
    private func registerEvent() {
        /// ‰∫ã‰ª∂ÁöÑ‰º†ÈÄí
        elasticityCollectionView.receivedSignalFunc {[weak self] (signal, message) -> (Any)? in
            self?.cellEventCallBack?(signal,message)
            return self?.sendSignalFunc(signalKey: signal, message: message)
        }
        
        stitchChannelFunc(sender: elasticityCollectionView)
        
        elasticityCollectionView.clickBottomButtonFunc { [weak self] (currentH) -> (IndexPath)? in
            //Ëá™Âä®Âà∑Êñ∞
            if self?.indexPath == nil {
                print("üå∂\(String(describing: self)).indexpathÊ≤°ÊúâÂÄº ÂØºËá¥self?.superTableView?.setIsSelected(index: index)ËÆæÁΩÆÂ§±Ë¥•Ôºå‰Ω†Â∞ÜÊ∞∏ËøúÈÉΩÂ±ï‰∏çÂºÄ‰Ω†ÁöÑcollectionViewÔºåüå∂üå∂ËØ∑Âú®‰Ω†ÁöÑtableviewÁöÑÊï∞ÊçÆÊ∫êÊñπÊ≥ïÈáåÈù¢ÔºåÁªôselfÁöÑindexPathËµãÂÄºüå∂üå∂")
                return nil
            }
            ///Êõ¥Êñ∞Â∏ÉÂ±Ä
            self?.superTableView?.setIsSelected(index: (self?.indexPath)!)
            self?.sendSignalFunc(signalKey: PYElasticityTableViewCell_ClickMoreButton, message: self?.collectionViewModelArray ?? [])
            if (self?.isAutoReloadData ?? true) {
                self?.superTableView?.reloadData()
            }
            return nil
        }
    }
    
    
    //MARK: ÂÖ≥‰∫é Áà∂Êéß‰ª∂ ÁöÑËé∑Âèñ ‰ª•ÂèäÊòØÂê¶Â±ïÂºÄÁä∂ÊÄÅÁöÑÂà§Êñ≠
    override func didMoveToSuperview() {
        super.didMoveToSuperview()
        superTableView = getScrollView(self)
    }
    
    /// Ëé∑ÂèñÁà∂Êéß‰ª∂ tableView
    private func getScrollView(_ view: UIView) -> (UITableView) {
        if superTableView != nil{
            return self.superTableView!
        }
        if view is UITableView {
            superTableView = view as? UITableView
            return view as! (UITableView)
        }
        if view.superview == nil {
            print("üå∂ \\getScrollView(_ view: UIView) -> (UIScrollView)\\ superView‰∏∫nil")
            return UITableView()
        }
        let scrollView = self.getScrollView(view.superview!)
        return scrollView
    }
    
    ///ÊòØÂê¶‰∏∫ÈÄâ‰∏≠Áä∂ÊÄÅ
    private func getIsSelected(index: IndexPath?) -> (Bool) {
        if let index_ = index {
            return (self.superTableView?.getCellIsSelected(index: index_)) ?? false
        }
        print("üå∂\(self)ÔºåÊöÇÊó†indexPath,ËØ∑Êü•ÁúãtableviewÁöÑÊï∞ÊçÆÊ∫ê‰∏≠ÔºåÊòØÂê¶ÁªôcellÁöÑindexPathËµãÂÄº")
        return false
    }
}

